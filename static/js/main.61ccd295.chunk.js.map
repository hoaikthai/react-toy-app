{"version":3,"sources":["pages/Home.tsx","components/Memo.tsx","pages/HeavyTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","Root","to","styled","div","Memo","props","deps","children","useMemo","HeavyTable","sampleData","sampleTableData","data","generatedData","Array","fill","map","Math","round","random","length","filter","item","nameOptions","name","useState","setData","isEditing","setIsEditing","handleFieldChange","index","field","value","prevData","idx","Table","TableHead","TableRow","TableCell","TableBody","JSON","stringify","hover","Select","label","onChange","e","target","MenuItem","TextField","prop1","prop2","prop3","prop4","prop5","prop6","prop7","prop8","prop9","prop10","prop11","prop12","prop13","prop14","Button","onClick","prev","val","switchEditMode","variant","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61ccd295.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\"\nimport styled from \"styled-components\"\n\nexport const Home = () => {\n  return (\n    <Root>\n      <Link to=\"/heavy-table\">Heavy table</Link>\n    </Root>\n  )\n}\n\nconst Root = styled.div`\n  padding: 32px;\n`\n","import { ReactNode, useMemo } from \"react\"\n\nexport type MemoProps = {\n  deps?: any[]\n  children?: ReactNode | ReactNode[]\n}\n\nexport const Memo = (props: MemoProps) => {\n  const { deps = [], children } = props\n\n  return useMemo(() => <>{children}</>, [...deps])\n}\n","import { Button, MenuItem, Select, Table, TableBody, TableCell, TableHead, TableRow, TextField } from \"@mui/material\"\nimport { useState } from \"react\"\nimport styled from \"styled-components\"\nimport { Memo } from \"../components/Memo\"\nimport sampleTableData from \"../assets/data/sample-table-data.json\"\n\nexport const HeavyTable = () => {\n  const sampleData = sampleTableData.data\n  const generatedData = Array(200)\n    .fill(0)\n    .map(() => sampleData[Math.round(Math.random() * sampleData.length - 1)])\n    .filter((item) => !!item)\n  const nameOptions = sampleData.map((item) => item.name)\n  const [data, setData] = useState(generatedData)\n  const [isEditing, setIsEditing] = useState(Array(data.length).fill(false))\n\n  const switchEditMode = (index: number) => {\n    setIsEditing((prev) => prev.map((val, idx) => (idx === index ? !val : val)))\n  }\n\n  const handleFieldChange = (index: number, field: string, value: string) => {\n    setData((prevData) => prevData.map((item, idx) => (idx === index ? { ...item, [field]: value } : item)))\n  }\n\n  return (\n    <Root>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Prop 1</TableCell>\n            <TableCell>Prop 2</TableCell>\n            <TableCell>Prop 3</TableCell>\n            <TableCell>Prop 4</TableCell>\n            <TableCell>Prop 5</TableCell>\n            <TableCell>Prop 6</TableCell>\n            <TableCell>Prop 7</TableCell>\n            <TableCell>Prop 8</TableCell>\n            <TableCell>Prop 9</TableCell>\n            <TableCell>Prop 10</TableCell>\n            <TableCell>Prop 11</TableCell>\n            <TableCell>Prop 12</TableCell>\n            <TableCell>Prop 13</TableCell>\n            <TableCell>Prop 14</TableCell>\n            <TableCell />\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((item, index) => (\n            <Memo key={index} deps={[isEditing[index], JSON.stringify(data[index])]}>\n              <TableRow hover>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <Select\n                      label=\"Name\"\n                      value={item.name}\n                      onChange={(e) => handleFieldChange(index, \"name\", e.target.value)}\n                    >\n                      {nameOptions.map((name, idx) => (\n                        <MenuItem key={idx} value={name}>\n                          {name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  ) : (\n                    item.name\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 1\"\n                      value={item.prop1}\n                      onChange={(e) => handleFieldChange(index, \"prop1\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop1\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 2\"\n                      value={item.prop2}\n                      onChange={(e) => handleFieldChange(index, \"prop2\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop2\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 3\"\n                      value={item.prop3}\n                      onChange={(e) => handleFieldChange(index, \"prop3\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop3\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 4\"\n                      value={item.prop4}\n                      onChange={(e) => handleFieldChange(index, \"prop4\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop4\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 5\"\n                      value={item.prop5}\n                      onChange={(e) => handleFieldChange(index, \"prop5\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop5\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 6\"\n                      value={item.prop6}\n                      onChange={(e) => handleFieldChange(index, \"prop6\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop6\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 7\"\n                      value={item.prop7}\n                      onChange={(e) => handleFieldChange(index, \"prop7\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop7\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 8\"\n                      value={item.prop8}\n                      onChange={(e) => handleFieldChange(index, \"prop8\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop8\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 9\"\n                      value={item.prop9}\n                      onChange={(e) => handleFieldChange(index, \"prop9\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop9\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 10\"\n                      value={item.prop10}\n                      onChange={(e) => handleFieldChange(index, \"prop10\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop10\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 11\"\n                      value={item.prop11}\n                      onChange={(e) => handleFieldChange(index, \"prop11\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop11\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 12\"\n                      value={item.prop12}\n                      onChange={(e) => handleFieldChange(index, \"prop12\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop12\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 13\"\n                      value={item.prop13}\n                      onChange={(e) => handleFieldChange(index, \"prop13\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop13\n                  )}\n                </TableCell>\n                <TableCell>\n                  {isEditing[index] ? (\n                    <TextField\n                      label=\"Prop 14\"\n                      value={item.prop14}\n                      onChange={(e) => handleFieldChange(index, \"prop14\", e.target.value)}\n                    />\n                  ) : (\n                    item.prop14\n                  )}\n                </TableCell>\n\n                <TableCell>\n                  <Button onClick={() => switchEditMode(index)} variant=\"contained\">\n                    {isEditing[index] ? \"Save\" : \"Edit\"}\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </Memo>\n          ))}\n        </TableBody>\n      </Table>\n    </Root>\n  )\n}\n\nconst Root = styled.div`\n  padding: 32px;\n`\n","import { Route, BrowserRouter, Switch } from \"react-router-dom\"\nimport { Home } from \"./pages/Home\"\nimport { HeavyTable } from \"./pages/HeavyTable\"\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/heavy-table\">\n          <HeavyTable />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}